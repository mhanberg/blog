- name: Wallaby
  role: Maintainer
  link: https://github.com/elixir-wallaby/wallaby
  description: |
    Wallaby is an Elixir integration testing library that provides a pleasant functional interface.

    After using Wallaby on a side project, the original creator ([Chris Keathley](https://keathley.io)) stepped down as the lead maintainer and asked the community if anyone could take ownership of the library.

    Having never "seriously" contributed to an open source project before, I was nervous about responding to Keathley. So I started contributing [small PRs](https://github.com/elixir-wallaby/wallaby/pull/371) to learn the code base and it lead to being asked to become an official maintainer of the library.

    Maintaining a popular open source library has presented me with new challenges in addition to programming and I truly appreciate every opportunity Wallaby has given me.

    Thank you Keathley!

- name: Temple
  role: Creator
  link: https://github.com/mhanberg/temple
  description: |
    Temple is an HTML DSL for Elixir and Phoenix and my first original contribution to the Elixir community.

    Inspired by the [Lucky web framework](https://luckyframework.org/guides/frontend/rendering-html#creating-a-page) templating language, Temple allows you to effortlessly author HTML without leaving the comfortable embrace of Elixir.

    I learned a _lot_ about macros and metaprogramming while building Temple and found a lot of great resources along the way, including&#58;

    * [Metaprogramming Elixir](https://amzn.to/2CVV7lr) by [Chris McCord](https://twitter.com/chris_mccord).
    * [Understanding Elixir Macros](https://www.theerlangelist.com/article/macros_1) blog series by [Saša Jurić](https://twitter.com/sasajuric)

- name: PlanetEx
  role: Creator
  link: https://github.com/sep/planet_ex
  description: |
    PlanetEx was my first side project that I finished and deployed. (And is still running today!)

    [SEP](https://sep.com) had an employee blog aggregator called Planet that would gather feeds from our company blog, our SharePoint blogs, and SEPers personal blogs.

    One day our IT did a routine upgrade of our SharePoint system and our little Planet had reached the end of it's days. The source code was so old that no one who built it was still around, so I sprung at the opportunity to flex my new Elixir skills.

    You can read more about PlanetEx [here](https://www.sep.com/sep-blog/2018/10/01/announcing-planetex-an-open-source-blog-aggregator-written-in-elixir/) and [here](https://www.sep.com/sep-blog/2018/08/18/how-to-subscribe-to-sharepoint-rss-feeds-without-ntlm-authentication/).

- name: jekyll-postcss
  role: Creator
  link: https://github.com/mhanberg/jekyll-postcss
  description: |
    I love to use [Jekyll](https://jekyllrb.org) to build static sites, but it's a PITA to use newer JS and CSS tooling since those tools are centered around the Node.js ecosystem.

    jekyll-postcss is a plugin for running your CSS through [PostCSS](https://postcss.org) without sacrificing the the developer experience that you get with Jekyll.

- name: jekyll-tailwind-starter
  role: Creator
  link: https://github.com/mhanberg/jekyll-tailwind-starter
  description: |
    I wrote jekyll-postcss primarily so I could use [TailwindCSS](https://tailwindcss.com) conveniently.

    This template bundles together Jekyll, TailwindCSS, [Autoprefixer](https://autoprefixer.github.io/), and [PurgeCSS](https://www.purgecss.com).
